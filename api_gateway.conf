   upstream backend-eks-s {
        zone backend-eks-s 64k;
    #        state /var/lib/nginx/state/backend-eks.conf;
        server 10.1.20.41:32013;
        server 10.1.20.244:32013;
        }

    include api_keys.conf;
    server {
       listen 443 ssl;
       server_name  *.f5selab.in;
       status_zone backend-eks;

       # TLS config
       ssl_certificate      /etc/ssl/certs/wildcard.f5selab.in.crt;
       ssl_certificate_key  /etc/ssl/certs/wildcard.f5selab.in.key;
       ssl_session_cache    shared:SSL:10m;
       ssl_session_timeout  5m;
       ssl_ciphers          HIGH:!aNULL:!MD5;
       ssl_protocols        TLSv1.2 TLSv1.3;

       # API definitions, one per file
       include api_conf.d/*.conf;

       # Error responses
       error_page 404 = @400;         # Treat invalid paths as bad requests
       proxy_intercept_errors on;     # Do not send backend errors to client
       include api_json_errors.conf;  # API client-friendly JSON errors
       default_type application/json; # If no content-type, assume JSON
       
       location / {
          proxy_set_header   Upgrade           $http_upgrade;
          proxy_set_header   Host              $host;
          proxy_set_header   X-Real-IP         $remote_addr;
          proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
          proxy_set_header   X-Forwarded-Proto $scheme;
          proxy_pass https://backend-eks-s;
      }
       location ~ (/api|/trading) {
          
	  access_log  /var/log/nginx/api-app-access.log  main_ext;
          auth_request /_validate_apikey;
 
          proxy_set_header   Host              $host;
          proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
          proxy_pass https://backend-eks-s;
      }

       location @hc-backend-eks-s {
          internal;
          proxy_connect_timeout 1s;
          proxy_read_timeout 1s;
          proxy_send_timeout 1s;

          proxy_pass http://backend-eks;
          health_check uri=/nginx-ready port=31893 interval=1s mandatory;
       }


       # API key validation
       location = /_validate_apikey {
        internal;

        if ($http_apikey = "") {
            return 401; # Unauthorized
            }
        if ($api_client_name = "") {
            return 403; # Forbidden
            }

        return 204; # OK (no content)
        } 

     }
